from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import login, logout, update_session_auth_hash
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.http import JsonResponse
from .forms import RegisterForm, PetForm, AppointmentForm, BlogPostForm
from .models import Pet, Appointment, Vet, BlogPost, UserProfile
from datetime import datetime
from django.core.mail import send_mail
from django.conf import settings
import logging
from django.template.loader import render_to_string
from django.views.decorators.http import require_GET, require_POST
from django.contrib.auth.forms import PasswordChangeForm

logger = logging.getLogger(__name__)

def home(request):
    vets = Vet.objects.all()
    recommended_posts = BlogPost.objects.order_by('-created_at')[:3]  # –ü–æ–ª—É—á–∞–µ–º 3 –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏
    return render(request, 'clinic/home.html', {
        'vets': vets,
        'recommended_posts': recommended_posts
    })

def about(request):
    return render(request, 'clinic/about.html')

def doctors(request):
    vets = Vet.objects.filter(available=True)
    specialties = Vet.objects.filter(available=True).values_list('specialty', flat=True).distinct()
    return render(request, 'doctors.html', {
        'vets': vets,
        'specialties': specialties
    })

def contacts(request):
    return render(request, 'contacts.html')

def register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            user = form.save()
            logger.info(f'–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}')
            login(request, user)
            return redirect('home')
    else:
        form = RegisterForm()
    return render(request, 'clinic/register.html', {'form': form})

@login_required
def logout_view(request):
    if request.method == 'POST':
        logout(request)
        messages.success(request, '–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.')
        return redirect('home')
    return render(request, 'clinic/logout.html')

@login_required
def profile(request):
    if not request.user.is_authenticated:
        return redirect('login')
    
    pets = Pet.objects.filter(owner=request.user)
    appointments = Appointment.objects.filter(pet__owner=request.user).order_by('-date', '-time')
    
    upcoming_appointments = []
    past_appointments = []
    now = datetime.now()
    
    for appointment in appointments:
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        if appointment.status == 'cancelled':
            continue
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø–∏—Å—å –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–π
        if appointment.date > now.date() or (appointment.date == now.date() and appointment.time > now.time()):
            upcoming_appointments.append(appointment)
        else:
            # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ—à–ª–æ–º –∏ –µ—ë —Å—Ç–∞—Ç—É—Å 'pending', –º–µ–Ω—è–µ–º –Ω–∞ 'completed'
            if appointment.status == 'pending':
                appointment.status = 'completed'
                appointment.save()
            past_appointments.append(appointment)
    
    context = {
        'pets': pets,
        'upcoming_appointments': upcoming_appointments,
        'past_appointments': past_appointments,
        'vets': Vet.objects.filter(available=True),
        'now': now
    }
    
    return render(request, 'clinic/profile.html', context)

@login_required
def add_pet(request):
    if request.method == 'POST':
        form = PetForm(request.POST)
        if form.is_valid():
            pet = form.save(commit=False)
            pet.owner = request.user
            pet.save()
            messages.success(request, '–ü–∏—Ç–æ–º–µ—Ü —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!')
            return redirect('profile')
    else:
        form = PetForm()
    return render(request, 'clinic/add_pet.html', {'form': form})

@login_required
def edit_pet(request, pet_id):
    pet = get_object_or_404(Pet, id=pet_id, owner=request.user)
    if request.method == 'POST':
        form = PetForm(request.POST, instance=pet)
        if form.is_valid():
            form.save()
            messages.success(request, '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–æ–º—Ü–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!')
            return redirect('profile')
    else:
        form = PetForm(instance=pet)
    return render(request, 'clinic/edit_pet.html', {'form': form, 'pet': pet})

@login_required
def delete_pet(request, pet_id):
    pet = get_object_or_404(Pet, id=pet_id, owner=request.user)
    if request.method == 'POST':
        pet.delete()
        messages.success(request, '–ü–∏—Ç–æ–º–µ—Ü —É–¥–∞–ª–µ–Ω –∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è.')
        return redirect('profile')
    return render(request, 'clinic/delete_pet.html', {'pet': pet})

@login_required
def booking(request):
    if request.method == 'POST':
        form = AppointmentForm(request.user, request.POST)
        if form.is_valid():
            appointment = form.save(commit=False)
            appointment.pet = form.cleaned_data['pet']
            appointment.vet = form.cleaned_data['vet']
            appointment.save()

            # –ü–æ–ª—É—á–∞–µ–º email –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            user_email = request.user.email
            send_appointment_confirmation(user_email, appointment)

            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {appointment.date} {appointment.time} - {appointment.pet.name} –∫ –≤—Ä–∞—á—É {appointment.vet.name}")
            messages.success(request, '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!')
            return redirect('profile')
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã: {form.errors}")
    else:
        form = AppointmentForm(request.user)

    return render(request, 'clinic/booking.html', {
        'form': form,
        'vets': Vet.objects.filter(available=True)
    })

def send_appointment_confirmation(user_email, appointment):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å–µ–º —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏ –ø–∞—Ü–∏–µ–Ω—Ç—É –∏ –≤—Ä–∞—á—É"""
    logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏ {appointment.id}")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–∞—Ü–∏–µ–Ω—Ç—É
    subject = '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–∏–µ–º'
    message = f'''
–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!

–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º –≤ –Ω–∞—à—É –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—É—é –∫–ª–∏–Ω–∏–∫—É. –ù–∏–∂–µ —É–∫–∞–∑–∞–Ω—ã –¥–µ—Ç–∞–ª–∏ –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏:

üìÖ –î–∞—Ç–∞: {appointment.date.strftime("%d.%m.%Y")}
‚è∞ –í—Ä–µ–º—è: {appointment.time.strftime("%H:%M")}
üë©‚Äç‚öïÔ∏è –í—Ä–∞—á: {appointment.vet.name}
üêæ –ü–∏—Ç–æ–º–µ—Ü: {appointment.pet.name}

–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –∑–∞—Ä–∞–Ω–µ–µ.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,  
–ö–æ–º–∞–Ω–¥–∞ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω–æ–π –∫–ª–∏–Ω–∏–∫–∏ DrHvost
'''
    from_email = settings.EMAIL_HOST_USER
    recipient_list = [user_email]

    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –ø–∞—Ü–∏–µ–Ω—Ç—É –Ω–∞ –∞–¥—Ä–µ—Å {user_email}")
        send_mail(subject, message, from_email, recipient_list, fail_silently=False)
        logger.info("–ü–∏—Å—å–º–æ –ø–∞—Ü–∏–µ–Ω—Ç—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –ø–∞—Ü–∏–µ–Ω—Ç—É: {e}")

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –≤—Ä–∞—á—É
    if appointment.vet.email:
        logger.info(f"–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–∏—Å—å–º–∞ –¥–ª—è –≤—Ä–∞—á–∞ {appointment.vet.name} –Ω–∞ –∞–¥—Ä–µ—Å {appointment.vet.email}")
        vet_subject = '–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å –Ω–∞ –ø—Ä–∏—ë–º'
        vet_message = render_to_string('clinic/email/vet_appointment_notification.html', {
            'appointment': appointment
        })
        vet_recipient_list = [appointment.vet.email]

        try:
            logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –≤—Ä–∞—á—É –Ω–∞ –∞–¥—Ä–µ—Å {appointment.vet.email}")
            send_mail(
                vet_subject,
                '',
                from_email,
                vet_recipient_list,
                html_message=vet_message,
                fail_silently=False
            )
            logger.info("–ü–∏—Å—å–º–æ –≤—Ä–∞—á—É —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ –≤—Ä–∞—á—É: {e}")
    else:
        logger.warning(f"–£ –≤—Ä–∞—á–∞ {appointment.vet.name} –Ω–µ —É–∫–∞–∑–∞–Ω email –∞–¥—Ä–µ—Å")

@login_required
def get_available_times(request):
    vet_id = request.GET.get('vet_id')
    date_str = request.GET.get('date')

    if not vet_id or not date_str:
        return JsonResponse({'error': '–ù–µ —É–∫–∞–∑–∞–Ω –≤—Ä–∞—á –∏–ª–∏ –¥–∞—Ç–∞'}, status=400)

    try:
        vet = Vet.objects.get(id=vet_id)
        appointment_date = datetime.strptime(date_str, '%Y-%m-%d').date()

        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–ø–∏—Å–∏ (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º pending)
        booked_times = Appointment.objects.filter(
            vet=vet,
            date=appointment_date,
            status='pending'  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
        ).values_list('time', flat=True)

        all_times = Appointment.TIME_CHOICES

        available_times = []
        for time_obj, display_time in all_times:
            if time_obj not in booked_times:
                available_times.append({
                    'value': time_obj.strftime('%H:%M'),
                    'display': display_time
                })

        return JsonResponse({'available_times': available_times})

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ get_available_times: {str(e)}")
        return JsonResponse({'error': '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏'}, status=500)

@login_required
def vet_profile(request):
    try:
        vet = Vet.objects.filter(user=request.user).first()
        if not vet:
            messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø—Ä–æ—Ñ–∏–ª—é –≤—Ä–∞—á–∞.')
            return redirect('home')

        now = datetime.now()
        appointments = Appointment.objects.filter(vet=vet).order_by('date', 'time')

        upcoming = []
        past = []
        for appt in appointments:
            if appt.date > now.date() or (appt.date == now.date() and appt.time > now.time()):
                upcoming.append(appt)
            else:
                # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ –ø—Ä–æ—à–ª–æ–º –∏ –µ—ë —Å—Ç–∞—Ç—É—Å 'pending', –º–µ–Ω—è–µ–º –Ω–∞ 'completed'
                if appt.status == 'pending':
                    appt.status = 'completed'
                    appt.save()
                past.append(appt)

        upcoming_by_date = {}
        past_by_date = {}
        for appt in upcoming:
            upcoming_by_date.setdefault(appt.date, []).append(appt)
        for appt in past:
            past_by_date.setdefault(appt.date, []).append(appt)

        return render(request, 'clinic/vet_profile.html', {
            'vet': vet,
            'upcoming_appointments': upcoming,
            'past_appointments': past,
            'upcoming_by_date': upcoming_by_date,
            'past_by_date': past_by_date
        })
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ vet_profile: {str(e)}")
        messages.error(request, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–∞—á–∞.')
        return redirect('home')

@login_required
def create_appointment(request):
    if request.method == 'POST':
        form = AppointmentForm(request.user, request.POST)
        if form.is_valid():
            appointment = form.save(commit=False)
            appointment.save()
            messages.success(request, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –ø—Ä–∏–µ–º!')
            return redirect('profile')
    else:
        form = AppointmentForm(request.user)
    return render(request, 'clinic/create_appointment.html', {'form': form})

def blog_list(request):
    search_query = request.GET.get('search', '')
    if search_query:
        posts = BlogPost.objects.filter(title__icontains=search_query)
    else:
        posts = BlogPost.objects.all()
    return render(request, 'clinic/blog/list.html', {'posts': posts})

def blog_detail(request, post_id):
    post = get_object_or_404(BlogPost, id=post_id)
    return render(request, 'clinic/blog/detail.html', {'post': post})

@login_required
def blog_create(request):
    if not hasattr(request.user, 'vet'):
        messages.error(request, '–¢–æ–ª—å–∫–æ –≤–µ—Ç–µ—Ä–∏–Ω–∞—Ä—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å—Ç–∞—Ç—å–∏')
        return redirect('blog_list')
    
    if request.method == 'POST':
        form = BlogPostForm(request.POST, request.FILES)
        if form.is_valid():
            post = form.save(commit=False)
            post.author = request.user.vet
            post.save()
            messages.success(request, '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞')
            return redirect('blog_list')
    else:
        form = BlogPostForm()
    
    return render(request, 'clinic/blog/create.html', {'form': form})

@login_required
def blog_edit(request, post_id):
    post = get_object_or_404(BlogPost, id=post_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–æ–º —Å—Ç–∞—Ç—å–∏
    if not request.user.vet or request.user.vet != post.author:
        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Å—Ç–∞—Ç—å–∏')
        return redirect('blog_detail', post_id=post.id)
    
    if request.method == 'POST':
        form = BlogPostForm(request.POST, request.FILES, instance=post)
        if form.is_valid():
            form.save()
            messages.success(request, '–°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
            return redirect('blog_detail', post_id=post.id)
    else:
        form = BlogPostForm(instance=post)
    
    return render(request, 'clinic/blog/edit.html', {
        'form': form,
        'post': post
    })

@login_required
def cancel_appointment(request, appointment_id):
    appointment = get_object_or_404(Appointment, id=appointment_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –ø–∏—Ç–æ–º—Ü–∞
    if appointment.pet.owner != request.user:
        messages.error(request, '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –æ—Ç–º–µ–Ω—ã —ç—Ç–æ–π –∑–∞–ø–∏—Å–∏')
        return redirect('profile')
    
    if request.method == 'POST':
        appointment.status = 'cancelled'
        appointment.save()
        messages.success(request, '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞')
        return redirect('profile')
    
    return render(request, 'clinic/cancel_appointment.html', {'appointment': appointment})

@login_required
@require_GET
def profile_info_tab(request):
    return render(request, 'clinic/profile_tab_info.html', {})

@login_required
@require_GET
def profile_pets_tab(request):
    pets = request.user.pets.all()
    return render(request, 'clinic/profile_tab_pets.html', {'pets': pets})

@login_required
@require_GET
def profile_upcoming_tab(request):
    from datetime import datetime
    now = datetime.now()
    appointments = request.user.pets.all().values_list('appointments', flat=True)
    upcoming_appointments = []
    for pet in request.user.pets.all():
        for appointment in pet.appointments.filter(status__in=['pending', 'completed']).order_by('date', 'time'):
            if appointment.status == 'pending' and (appointment.date > now.date() or (appointment.date == now.date() and appointment.time > now.time())):
                upcoming_appointments.append(appointment)
    return render(request, 'clinic/profile_tab_upcoming.html', {'upcoming_appointments': upcoming_appointments})

@login_required
@require_GET
def profile_history_tab(request):
    from datetime import datetime
    now = datetime.now()
    past_appointments = []
    for pet in request.user.pets.all():
        for appointment in pet.appointments.filter(status__in=['completed', 'cancelled']).order_by('-date', '-time'):
            if appointment.status in ['completed', 'cancelled'] and (appointment.date < now.date() or (appointment.date == now.date() and appointment.time <= now.time())):
                past_appointments.append(appointment)
    return render(request, 'clinic/profile_tab_history.html', {'past_appointments': past_appointments})

@login_required
def profile_dashboard(request):
    return render(request, 'clinic/profile_dashboard.html')

@login_required
@require_POST
def profile_change_password(request):
    form = PasswordChangeForm(user=request.user, data=request.POST)
    if form.is_valid():
        user = form.save()
        update_session_auth_hash(request, user)
        messages.success(request, '–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω.')
    else:
        messages.error(request, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –ø–∞—Ä–æ–ª—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.')
    return redirect('profile_dashboard')
